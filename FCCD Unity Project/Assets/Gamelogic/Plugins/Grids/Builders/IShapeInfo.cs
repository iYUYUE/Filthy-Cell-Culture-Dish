//----------------------------------------------//
// Gamelogic Grids                              //
// http://www.gamelogic.co.za                   //
// Copyright (c) 2013 Gamelogic (Pty) Ltd       //
//----------------------------------------------//

namespace Gamelogic.Grids
{
	/**
		All Shape Info classes should implement this interface.

		This provides basic transformations and set operations to combine
		shape info instances.

		@link_constructing_grids 
		
		
		@version1_0
		@ingroup BuilderInterface
	*/
	public interface IShapeInfo<TShapeInfo, TGrid, TPoint, TVectorPoint, TShapeOp>
		where TShapeInfo : IShapeInfo<TShapeInfo, TGrid, TPoint, TVectorPoint, TShapeOp>
		where TGrid : IGridSpace<TPoint>
		where TPoint : ISplicedVectorPoint<TPoint, TVectorPoint>, IGridPoint<TPoint>
		where TVectorPoint : IVectorPoint<TVectorPoint>
	{
		#region Set Operators
		/**
			Provides a shape operator that will form the intersection of the 
			shape describe by this instance and the shape info generated by one 
			of the shape functions of the shape operator returned by this function.

			@link_constructing_grids
		*/
		TShapeOp Intersection();

		/**
			Provides a shape operator that will form the union of the 
			shape describe by this instance and the shape info generated by one 
			of the shape functions of the shape operator returned by this function.

			@link_constructing_grids
		*/
		TShapeOp Union();

		/**
			Provides a shape operator that will form the difference of the 
			shape describe by this instance and the shape info generated by one 
			of the shape functions of the shape operator returned by this function.

			@link_constructing_grids
		*/
		TShapeOp Difference();
		#endregion

		#region Transforms
		TShapeInfo Translate(TVectorPoint offset);
		TShapeInfo Translate(int x, int y);
		#endregion

		#region EndShape
		/**
			This functions is called to end shape construction and returned 
			a grid described by this shape info.

			@link_constructing_grids
		*/
		TGrid EndShape();
		#endregion
	}
}