//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Gamelogic.Grids;
using System.Collections.Generic;
using UnityEngine;

namespace AssemblyCSharp
{
	public class Cell
	{
		private DiamondPoint point;
		private Dictionary<Player ,int> pops;

		public Cell (DiamondPoint DP)
		{
			point = DP;
			point.cell = this;
		}

		public void update(){
			// Search Players Nearby
			HashSet<Player> PlayerNearBy = new HashSet<Player> ();
			foreach (Cell neighbor in this.getNeighbors()) {
				foreach (Player player in neighbor.getPlayerList())
					PlayerNearBy.Add(player);		
			}
			// Add New Players
			foreach (Player player in PlayerNearBy) {
				if(!this.getPlayerList().Contains(player))
					pops.Add (player, Global.baseCapacity / 10);
			
			}
			// Update Population
			foreach (var pop in pops)
			{
				pops[pop.Key] += (int) (Formula.GrowthRate(pop.Key.getGrowthValue()) * (double) ((Formula.GrowthCap(pop.Key.getGrowthValue()) - pop.Value) * pop.Value));
				foreach (var popX in pops){
					if(pop.Key.isPeaceWith(popX.Key))
						pops[pop.Key] += PopDance(pop.Key, popX.Key, pops[pop.Key], pops[popX.Key]);
				}
			}

		}

		public int PopDance(Player Player1, Player PlayerX, int Pop1, int PopX) {
			return Formula.LosePop(Player1, PlayerX, Pop1, PopX) + 
				Formula.GainPop(Player1, PlayerX, Pop1, PopX);
		}

		public void explore(Player pl){

		}

		private List<Cell> getNeighbors(){
			List<Cell> ret = new List<Cell> ();

			var neighbors = Global.grid.GetNeighbors(point);
			
			foreach (DiamondPoint neighbor in neighbors)
			{
				if (neighbor == null)
				{
					Debug.LogError("cell null");
				}
				else
				{
					ret.Add(neighbor.cell);
				}
			}

			return ret;
		}

		public List<Player> getPlayerList() {
			List<Player> ret = new List<Player> ();
			foreach (var pop in pops)
				ret.Add (pop.Key);
			return ret;
		}

		public int getPop(Player pl) {
			int pop;
			if (this.pops.TryGetValue (pl, out pop))
				return pop;
			else
				return -1;
		}
	}
}

